df[1,]$transaction_date + 30
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date,
date <= df[1,]$transaction_date + 30)
stock_prices %>%
filter(symbol == "SPG",
date > df[1,]$transaction_date,
date <= df[1,]$transaction_date + 30) %>%
summarise(sum(open - df[1,]$open))
df[1,]$open
stock_prices %>%
filter(symbol == "SPG",
date > df[1,]$transaction_date,
date <= df[1,]$transaction_date + 30) %>%
summarise(mean(open - df[1,]$open)/df[1,]$open)
stock_prices %>%
filter(symbol == "SPG",
date > df[1,]$transaction_date,
date <= df[1,]$transaction_date + 30) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open)
# example for the first row of the data:
view(df[1,])
9*30
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open)
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
ggplot(aes(x = date, y = open)) %>%
geom_line()
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
ggplot(aes(x = date, y = open)) +
geom_line()
geom_line(df[1,]$open)
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
ggplot(aes(x = date, y = open)) +
geom_hline(df[1,]$open)
?geom_hline
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
ggplot(aes(x = date, y = open)) +
geom_hline(yintercept = df[1,]$open)
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
ggplot(aes(x = date, y = open)) +
geom_hline(yintercept = df[1,]$open) +
geom_line()
113*0.95
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open,
sd = sd(open - df[1,]$open)/df[1,]$open)
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open,
sd = sd(open - df[1,]$open)/df[1,]$open) %>%
pull()
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open,
sd = sd(open - df[1,]$open)/df[1,]$open) %>%
as.vector()
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open,
sd = sd(open - df[1,]$open)/df[1,]$open) %>%
as.numeric()
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open,
sd_per_change = sd(open - df[1,]$open)/df[1,]$open) %>%
as.numeric()
short_term <- function(ticker, transaction_date, stock_prices) {
stock_prices %>%
filter(symbol == "SPG",
date >= transaction_date + 14,
date <= transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open,
sd_per_change = sd(open - df[1,]$open)/df[1,]$open) %>%
as.numeric()
}
short_term <- function(ticker, transaction_date, stock_prices) {
stock_prices %>%
filter(symbol == ticker,
date >= transaction_date + 14,
date <= transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open,
sd_per_change = sd(open - df[1,]$open)/df[1,]$open) %>%
as.numeric()
}
short_term(df[1,]$ticker, df[1,]$transaction_date )
short_term(df[1,]$ticker, df[1,]$transaction_date, stock_prices)
short_term <- function(ticker, transaction_date, stock_prices = stock_prices) {
stock_prices %>%
filter(symbol == ticker,
date >= transaction_date + 14,
date <= transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open,
sd_per_change = sd(open - df[1,]$open)/df[1,]$open) %>%
as.numeric()
}
short_term(df[1,]$ticker, df[1,]$transaction_date)
short_term(df[1,]$ticker, df[1,]$transaction_date, stock_prices)
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open,
sd_per_change = sd(open - df[1,]$open)/df[1,]$open) %>%
as.numeric()
?possibly
short_term <- purrr::possibly(.f = short_term, c(NA, NA))
short_term(df[1,]$ticker, df[1,]$transaction_date, stock_prices)
df1 <- df[1:100,] %>%
rowwise() %>%
mutate(short_term = short_term(ticker, transaction_date))
df1 <- df[1:100,] %>%
rowwise() %>%
mutate(short_term = short_term(ticker, transaction_date)[1])
view(df1)
short_term(df[1,]$ticker, df[1,]$transaction_date, stock_prices)[1]
df1 <- df[1:100,] %>%
rowwise() %>%
mutate(short_term = short_term(ticker, transaction_date)[1])
names(df1)
df1$short_term
df1 <- df[1,] %>%
rowwise() %>%
mutate(short_term = short_term(ticker, transaction_date)[1])
df1$short_term
df1 <- df[1:100,] %>%
rowwise() %>%
mutate(short_term = short_term(ticker, transaction_date, stock_prices)[1])
view(df1)
short_term <- function(ticker, transaction_date, ticker_open, stock_prices) {
stock_prices %>%
filter(symbol == ticker,
date >= transaction_date + 14,
date <= transaction_date + 42) %>%
summarise(avg_per_change = mean(open - ticker_open)/ticker_open,
sd_per_change = sd(open - ticker_open)/ticker_open) %>%
as.numeric()
}
short_term <- purrr::possibly(.f = short_term, c(NA, NA))
short_term(df[1,]$ticker, df[1,]$transaction_date, df[1,]$open, stock_prices)[1]
short_term(df[1,]$ticker, df[1,]$transaction_date, df[1,]$open, stock_prices)
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open,
sd_per_change = sd(open - df[1,]$open)/df[1,]$open) %>%
as.numeric()
df1 <- df[1:100,] %>%
rowwise() %>%
mutate(short_term = short_term(ticker, transaction_date, stock_prices)[1])
view(df1)
df1 <- df[1:100,] %>%
rowwise() %>%
mutate(short_term = short_term(ticker, transaction_date, open, stock_prices)[1])
view(df1)
zz <- data.frame(id = 1:4)
df$lst <- list(list(a = 1, b = 2), list(a = 3, b = 4), list(a = 5, b = 6), list(a = 7, b = 8))
zz$lst <- list(list(a = 1, b = 2), list(a = 3, b = 4), list(a = 5, b = 6), list(a = 7, b = 8))
# View the dataframe
print(zz)
short_term <- function(ticker, transaction_date, ticker_open, stock_prices) {
stock_prices %>%
filter(symbol == ticker,
date >= transaction_date + 14,
date <= transaction_date + 42) %>%
summarise(avg_per_change = mean(open - ticker_open)/ticker_open,
sd_per_change = sd(open - ticker_open)/ticker_open) %>%
unlist()
}
short_term <- purrr::possibly(.f = short_term, c(NA, NA))
short_term(df[1,]$ticker, df[1,]$transaction_date, df[1,]$open, stock_prices)
df1 <- df[1:100,] %>%
rowwise() %>%
mutate(short_term = list(short_term(ticker, transaction_date, open, stock_prices))) %>%
ungroup() %>%
mutate(short_term.avg_per_change = map_dbl(short_term, ~ .[["avg_per_change"]]),
short_term.sd_per_change = map_dbl(short_term, ~ .[["sd_per_change"]]))
view(df1)
# example for the first row of the data:
view(df[1,])
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open,
sd_per_change = sd(open - df[1,]$open)/df[1,]$open) %>%
as.numeric()
# define helper function
short_term <- function(ticker, transaction_date, ticker_open, stock_prices) {
stock_prices %>%
filter(symbol == ticker,
date >= transaction_date + 14,
date <= transaction_date + 42) %>%
summarise(avg_per_change = mean(open - ticker_open)/ticker_open,
sd_per_change = sd(open - ticker_open)/ticker_open) %>%
unlist()
}
short_term <- purrr::possibly(.f = short_term, c(avg_per_change = NA, sd_per_change = NA))
# test helper function
short_term(df[1,]$ticker, df[1,]$transaction_date, df[1,]$open, stock_prices)
# apply to data frame
df1 <- df[1:1000,] %>%
rowwise() %>%
mutate(short_term = list(short_term(ticker, transaction_date, open, stock_prices))) %>%
ungroup() %>%
mutate(short_term.avg_per_change = map_dbl(short_term, ~ .[["avg_per_change"]]),
short_term.sd_per_change = map_dbl(short_term, ~ .[["sd_per_change"]]))
view(df1)
?performance
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open,
sd_per_change = sd(open - df[1,]$open)/df[1,]$open) %>%
as.numeric()
# define helper function
performance <- function(ticker, transaction_date, ticker_open,
lower = 14, upper = 42, stock_prices) {
stock_prices %>%
filter(symbol == ticker,
date >= transaction_date + lower,
date <= transaction_date + upper) %>%
summarise(avg_per_change = mean(open - ticker_open)/ticker_open,
sd_per_change = sd(open - ticker_open)/ticker_open) %>%
unlist()
}
short_term <- purrr::possibly(.f = performance, c(avg_per_change = NA, sd_per_change = NA))
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open,
sd_per_change = sd(open - df[1,]$open)/df[1,]$open) %>%
unlist()
# test helper function
performance(df[1,]$ticker, df[1,]$transaction_date, df[1,]$open, stock_prices)
# define helper function
performance <- function(ticker, transaction_date, ticker_open, stock_prices,
lower = 14, upper = 42) {
stock_prices %>%
filter(symbol == ticker,
date >= transaction_date + lower,
date <= transaction_date + upper) %>%
summarise(avg_per_change = mean(open - ticker_open)/ticker_open,
sd_per_change = sd(open - ticker_open)/ticker_open) %>%
unlist()
}
short_term <- purrr::possibly(.f = performance, c(avg_per_change = NA, sd_per_change = NA))
# test helper function
performance(df[1,]$ticker, df[1,]$transaction_date, df[1,]$open, stock_prices)
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open,
sd_per_change = sd(open - df[1,]$open)/df[1,]$open) %>%
unlist()
# example for the first row of the data:
view(df[1,])
stock_prices %>%
filter(symbol == "SPG",
date >= df[1,]$transaction_date + 14,
date <= df[1,]$transaction_date + 42) %>%
summarise(avg_per_change = mean(open - df[1,]$open)/df[1,]$open,
sd_per_change = sd(open - df[1,]$open)/df[1,]$open) %>%
unlist()
# define helper function
performance <- function(ticker, transaction_date, ticker_open, stock_prices,
lower = 14, upper = 42) {
stock_prices %>%
filter(symbol == ticker,
date >= transaction_date + lower,
date <= transaction_date + upper) %>%
summarise(avg_per_change = mean(open - ticker_open)/ticker_open,
sd_per_change = sd(open - ticker_open)/ticker_open) %>%
unlist()
}
short_term <- purrr::possibly(.f = performance, c(avg_per_change = NA, sd_per_change = NA))
# test helper function
performance(df[1,]$ticker, df[1,]$transaction_date, df[1,]$open, stock_prices)
# apply to data frame
df1 <- df[1:100,] %>%
rowwise() %>%
mutate(short_term = list(performance(ticker, transaction_date, open, stock_prices,
lower = 14, upper = 42)),
med_term = list(performance(ticker, transaction_date, open, stock_prices,
lower = 43, upper = 270))) %>%
ungroup() %>%
mutate(short_term.avg_per_change = map_dbl(short_term, ~ .[["avg_per_change"]]),
short_term.sd_per_change = map_dbl(short_term, ~ .[["sd_per_change"]]),
med_term.avg_per_change = map_dbl(med_term, ~ .[["avg_per_change"]]),
med_term.sd_per_change = map_dbl(med_term, ~ .[["sd_per_change"]])) %>%
select(-short_term, -med_term)
view(df1)
# Outputs:
#   1. stock_prices.csv
#   2. transactions.csv
# 0. Preliminaries -------------------------------------------------------------
library(tidyverse)
library(rjson)
library(quantmod)
library(tidyquant)
# 1. Raw data ------------------------------------------------------------------
# get raw data as json and store as list
# House of Representatives data:
df1 <- rjson::fromJSON(file = "https://house-stock-watcher-data.s3-us-west-2.amazonaws.com/data/all_transactions.json")
# Senate data:
df2 <- rjson::fromJSON(file = "https://senate-stock-watcher-data.s3-us-west-2.amazonaws.com/aggregate/all_transactions.json")
# convert from list to dataframe
df1 <- df1 %>%
tibble::enframe(name = "id", value = "data") %>%
tidyr::unnest_wider(data) %>%
dplyr::mutate(asset_type = NA,
comment = NA,
member_type = "representative") %>%
dplyr::rename("member" = "representative") %>%
dplyr::select(-id, -disclosure_year)
df2 <- df2 %>%
tibble::enframe(name = "id", value = "data") %>%
tidyr::unnest_wider(data) %>%
dplyr::mutate(district = NA,
cap_gains_over_200_usd = NA,
member_type = "senator") %>%
dplyr::rename("member" = "senator") %>%
dplyr::select(-id)
# merge house and senate data
df <- rbind(df1, df2); rm(df1, df2)
# clean irrelevant rows
df <- df %>%
filter(!is.na(ticker), ticker != "--") %>%
# convert amount column to integer (floored)
dplyr::mutate(amount_formatted = str_extract(amount, "\\$[0-9,]+") %>%
gsub("[\\$,]", "", .) %>%
as.integer() %>%
plyr::round_any(10))
# if data is already loaded:
stock_prices <- read.csv("../data/stock_prices_20230914.csv") %>%
mutate(date = as.Date(date))
df <- df %>%
dplyr::mutate(transaction_date = base::as.Date(transaction_date)) %>%
dplyr::left_join(stock_prices,
by = c("ticker" = "symbol", "transaction_date" = "date")) %>%
# remove rows with NA price values (presumably rows with invalid tickers)
dplyr::filter(!is.na(open)) %>%
# compute total shares purchased.
# recall that amount_formatted is the minimum amount of the transaction
dplyr::mutate(shares_purchased = ceiling(amount_formatted/open)) %>%
dplyr::arrange(desc(transaction_date))
# Associate transactions with ticker industry and country
df <- df %>%
mutate(transaction_date = as.Date(transaction_date)) %>%
select(-industry) %>%
left_join(select(rbind(tidyquant::tq_exchange("NYSE"), tidyquant::tq_exchange("NASDAQ")),
symbol, market.cap, country, ipo.year, industry),
by = c("ticker" = "symbol")) %>%
select(disclosure_date, transaction_date, owner, member, member_type, amount_formatted,
type, ticker, industry, sector, shares_purchased, open, high, low, close, volume,
everything())
performance <- function(ticker, transaction_date, ticker_open, stock_prices,
lower = 14, upper = 42) {
stock_prices %>%
filter(symbol == ticker,
date >= transaction_date + lower,
date <= transaction_date + upper) %>%
summarise(avg_per_change = mean(open - ticker_open)/ticker_open,
sd_per_change = sd(open - ticker_open)/ticker_open) %>%
unlist()
}
short_term <- purrr::possibly(.f = performance, c(avg_per_change = NA, sd_per_change = NA))
# apply to data frame
df1 <- df[1:100,] %>%
rowwise() %>%
mutate(short_term = list(performance(ticker, transaction_date, open, stock_prices,
lower = 14, upper = 42)),
med_term = list(performance(ticker, transaction_date, open, stock_prices,
lower = 43, upper = 270))) %>%
ungroup() %>%
mutate(short_term.avg_per_change = map_dbl(short_term, ~ .[["avg_per_change"]]),
short_term.sd_per_change = map_dbl(short_term, ~ .[["sd_per_change"]]),
med_term.avg_per_change = map_dbl(med_term, ~ .[["avg_per_change"]]),
med_term.sd_per_change = map_dbl(med_term, ~ .[["sd_per_change"]])) %>%
select(-short_term, -med_term)
view(df1)
rm(df1)
# apply to data frame
df <- df %>%
rowwise() %>%
mutate(short_term = list(performance(ticker, transaction_date, open, stock_prices,
lower = 14, upper = 42)),
med_term = list(performance(ticker, transaction_date, open, stock_prices,
lower = 43, upper = 270))) %>%
ungroup() %>%
mutate(short_term.avg_per_change = map_dbl(short_term, ~ .[["avg_per_change"]]),
short_term.sd_per_change = map_dbl(short_term, ~ .[["sd_per_change"]]),
med_term.avg_per_change = map_dbl(med_term, ~ .[["avg_per_change"]]),
med_term.sd_per_change = map_dbl(med_term, ~ .[["sd_per_change"]])) %>%
select(-short_term, -med_term)
write.csv(df, paste0("../data/transactions_", gsub("-", "", Sys.Date()), ".csv"),
row.names = FALSE)
view(head(df))
table(df$type)
# 0. Preliminaries -------------------------------------------------------------
library(tidyverse)
library(rjson)
library(quantmod)
library(tidyquant)
df1 <- rjson::fromJSON(file = "https://house-stock-watcher-data.s3-us-west-2.amazonaws.com/data/all_transactions.json")
# Senate data:
df2 <- rjson::fromJSON(file = "https://senate-stock-watcher-data.s3-us-west-2.amazonaws.com/aggregate/all_transactions.json")
# convert from list to dataframe
df1 <- df1 %>%
tibble::enframe(name = "id", value = "data") %>%
tidyr::unnest_wider(data) %>%
dplyr::mutate(asset_type = NA,
comment = NA,
member_type = "representative") %>%
dplyr::rename("member" = "representative") %>%
dplyr::select(-id, -disclosure_year)
df2 <- df2 %>%
tibble::enframe(name = "id", value = "data") %>%
tidyr::unnest_wider(data) %>%
dplyr::mutate(district = NA,
cap_gains_over_200_usd = NA,
member_type = "senator") %>%
dplyr::rename("member" = "senator") %>%
dplyr::select(-id)
# merge house and senate data
df <- rbind(df1, df2); rm(df1, df2)
view(df)
table(df$asset_type)
nrow(df)
df <- df %>%
filter(!is.na(ticker), ticker != "--") %>%
# convert amount column to integer (floored)
dplyr::mutate(amount_formatted = str_extract(amount, "\\$[0-9,]+") %>%
gsub("[\\$,]", "", .) %>%
as.integer() %>%
plyr::round_any(10))
nrow(df)
valid_tickers <- intersect(unique(df$ticker), c(tidyquant::tq_exchange("NASDAQ")$symbol,
tidyquant::tq_exchange("NYSE")$symbol))
# if data is already loaded:
stock_prices <- read.csv("../data/stock_prices_20230914.csv") %>%
mutate(date = as.Date(date))
view(stock_prices[1:100,])
length(valid_tickers)
view(df[1:100,])
df <- df %>%
mutate(transaction_date = as.Date(transaction_date)) %>%
select(-industry) %>%
left_join(select(rbind(tidyquant::tq_exchange("NYSE"), tidyquant::tq_exchange("NASDAQ")),
symbol, market.cap, country, ipo.year, industry),
by = c("ticker" = "symbol")) %>%
select(disclosure_date, transaction_date, owner, member, member_type, amount_formatted,
type, ticker, industry, sector, shares_purchased, open, high, low, close, volume,
everything())
# Associate transaction price with transactions
df <- df %>%
dplyr::mutate(transaction_date = base::as.Date(transaction_date)) %>%
dplyr::left_join(stock_prices,
by = c("ticker" = "symbol", "transaction_date" = "date")) %>%
# remove rows with NA price values (presumably rows with invalid tickers)
dplyr::filter(!is.na(open)) %>%
# compute total shares purchased.
# recall that amount_formatted is the minimum amount of the transaction
dplyr::mutate(shares_purchased = ceiling(amount_formatted/open)) %>%
dplyr::arrange(desc(transaction_date))
# Associate transactions with ticker industry and country
df <- df %>%
mutate(transaction_date = as.Date(transaction_date)) %>%
select(-industry) %>%
left_join(select(rbind(tidyquant::tq_exchange("NYSE"), tidyquant::tq_exchange("NASDAQ")),
symbol, market.cap, country, ipo.year, industry),
by = c("ticker" = "symbol")) %>%
select(disclosure_date, transaction_date, owner, member, member_type, amount_formatted,
type, ticker, industry, sector, shares_purchased, open, high, low, close, volume,
everything())
view(df[1:100,])
table(df$type)
table(df$asset_type)
